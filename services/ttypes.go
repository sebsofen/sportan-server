// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package services

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// Attributes:
//  - What
//  - Why
type InvalidOperation struct {
	What int32  `thrift:"what,1" db:"what" json:"what"`
	Why  string `thrift:"why,2" db:"why" json:"why"`
}

func NewInvalidOperation() *InvalidOperation {
	return &InvalidOperation{}
}

func (p *InvalidOperation) GetWhat() int32 {
	return p.What
}

func (p *InvalidOperation) GetWhy() string {
	return p.Why
}
func (p *InvalidOperation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InvalidOperation) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.What = v
	}
	return nil
}

func (p *InvalidOperation) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Why = v
	}
	return nil
}

func (p *InvalidOperation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InvalidOperation"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InvalidOperation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("what", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:what: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.What)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.what (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:what: ", p), err)
	}
	return err
}

func (p *InvalidOperation) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("why", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:why: ", p), err)
	}
	if err := oprot.WriteString(string(p.Why)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.why (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:why: ", p), err)
	}
	return err
}

func (p *InvalidOperation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidOperation(%+v)", *p)
}

func (p *InvalidOperation) Error() string {
	return p.String()
}

// Attributes:
//  - Message
type InvalidToken struct {
	Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewInvalidToken() *InvalidToken {
	return &InvalidToken{}
}

func (p *InvalidToken) GetMessage() string {
	return p.Message
}
func (p *InvalidToken) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InvalidToken) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *InvalidToken) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InvalidToken"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InvalidToken) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *InvalidToken) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidToken(%+v)", *p)
}

func (p *InvalidToken) Error() string {
	return p.String()
}

// Attributes:
//  - Identifier
//  - Passwordhash
type UserCredentials struct {
	Identifier   string  `thrift:"identifier,1,required" db:"identifier" json:"identifier"`
	Passwordhash *string `thrift:"passwordhash,2" db:"passwordhash" json:"passwordhash,omitempty"`
}

func NewUserCredentials() *UserCredentials {
	return &UserCredentials{}
}

func (p *UserCredentials) GetIdentifier() string {
	return p.Identifier
}

var UserCredentials_Passwordhash_DEFAULT string

func (p *UserCredentials) GetPasswordhash() string {
	if !p.IsSetPasswordhash() {
		return UserCredentials_Passwordhash_DEFAULT
	}
	return *p.Passwordhash
}
func (p *UserCredentials) IsSetPasswordhash() bool {
	return p.Passwordhash != nil
}

func (p *UserCredentials) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetIdentifier bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetIdentifier = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetIdentifier {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Identifier is not set"))
	}
	return nil
}

func (p *UserCredentials) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Identifier = v
	}
	return nil
}

func (p *UserCredentials) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Passwordhash = &v
	}
	return nil
}

func (p *UserCredentials) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserCredentials"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserCredentials) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:identifier: ", p), err)
	}
	if err := oprot.WriteString(string(p.Identifier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.identifier (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:identifier: ", p), err)
	}
	return err
}

func (p *UserCredentials) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPasswordhash() {
		if err := oprot.WriteFieldBegin("passwordhash", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:passwordhash: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Passwordhash)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.passwordhash (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:passwordhash: ", p), err)
		}
	}
	return err
}

func (p *UserCredentials) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserCredentials(%+v)", *p)
}

// Attributes:
//  - Identifier
//  - Username
//  - Profilepicture
type UserProfile struct {
	Identifier     *string `thrift:"identifier,1" db:"identifier" json:"identifier,omitempty"`
	Username       *string `thrift:"username,2" db:"username" json:"username,omitempty"`
	Profilepicture []byte  `thrift:"profilepicture,3" db:"profilepicture" json:"profilepicture,omitempty"`
}

func NewUserProfile() *UserProfile {
	return &UserProfile{}
}

var UserProfile_Identifier_DEFAULT string

func (p *UserProfile) GetIdentifier() string {
	if !p.IsSetIdentifier() {
		return UserProfile_Identifier_DEFAULT
	}
	return *p.Identifier
}

var UserProfile_Username_DEFAULT string

func (p *UserProfile) GetUsername() string {
	if !p.IsSetUsername() {
		return UserProfile_Username_DEFAULT
	}
	return *p.Username
}

var UserProfile_Profilepicture_DEFAULT []byte

func (p *UserProfile) GetProfilepicture() []byte {
	return p.Profilepicture
}
func (p *UserProfile) IsSetIdentifier() bool {
	return p.Identifier != nil
}

func (p *UserProfile) IsSetUsername() bool {
	return p.Username != nil
}

func (p *UserProfile) IsSetProfilepicture() bool {
	return p.Profilepicture != nil
}

func (p *UserProfile) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserProfile) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Identifier = &v
	}
	return nil
}

func (p *UserProfile) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Username = &v
	}
	return nil
}

func (p *UserProfile) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Profilepicture = v
	}
	return nil
}

func (p *UserProfile) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserProfile"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserProfile) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIdentifier() {
		if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:identifier: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Identifier)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.identifier (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:identifier: ", p), err)
		}
	}
	return err
}

func (p *UserProfile) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Username)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err)
		}
	}
	return err
}

func (p *UserProfile) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetProfilepicture() {
		if err := oprot.WriteFieldBegin("profilepicture", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:profilepicture: ", p), err)
		}
		if err := oprot.WriteBinary(p.Profilepicture); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.profilepicture (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:profilepicture: ", p), err)
		}
	}
	return err
}

func (p *UserProfile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserProfile(%+v)", *p)
}

// Attributes:
//  - Token
//  - ValidityDuration
type ThriftToken struct {
	Token            string `thrift:"token,1,required" db:"token" json:"token"`
	ValidityDuration int64  `thrift:"validityDuration,2,required" db:"validityDuration" json:"validityDuration"`
}

func NewThriftToken() *ThriftToken {
	return &ThriftToken{}
}

func (p *ThriftToken) GetToken() string {
	return p.Token
}

func (p *ThriftToken) GetValidityDuration() int64 {
	return p.ValidityDuration
}
func (p *ThriftToken) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetToken bool = false
	var issetValidityDuration bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetToken = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetValidityDuration = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetToken {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Token is not set"))
	}
	if !issetValidityDuration {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ValidityDuration is not set"))
	}
	return nil
}

func (p *ThriftToken) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *ThriftToken) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ValidityDuration = v
	}
	return nil
}

func (p *ThriftToken) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ThriftToken"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftToken) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err)
	}
	return err
}

func (p *ThriftToken) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("validityDuration", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:validityDuration: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ValidityDuration)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.validityDuration (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:validityDuration: ", p), err)
	}
	return err
}

func (p *ThriftToken) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftToken(%+v)", *p)
}

// Attributes:
//  - Lat
//  - Lon
type Coordinate struct {
	Lat float64 `thrift:"lat,1,required" db:"lat" json:"lat"`
	Lon float64 `thrift:"lon,2,required" db:"lon" json:"lon"`
}

func NewCoordinate() *Coordinate {
	return &Coordinate{}
}

func (p *Coordinate) GetLat() float64 {
	return p.Lat
}

func (p *Coordinate) GetLon() float64 {
	return p.Lon
}
func (p *Coordinate) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetLat bool = false
	var issetLon bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetLat = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetLon = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetLat {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Lat is not set"))
	}
	if !issetLon {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Lon is not set"))
	}
	return nil
}

func (p *Coordinate) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Lat = v
	}
	return nil
}

func (p *Coordinate) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Lon = v
	}
	return nil
}

func (p *Coordinate) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Coordinate"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Coordinate) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lat", thrift.DOUBLE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lat: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Lat)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lat (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lat: ", p), err)
	}
	return err
}

func (p *Coordinate) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lon", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lon: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Lon)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lon (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lon: ", p), err)
	}
	return err
}

func (p *Coordinate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Coordinate(%+v)", *p)
}

// Attributes:
//  - ID
//  - Title
type Area struct {
	ID    string `thrift:"id,1,required" db:"id" json:"id"`
	Title string `thrift:"title,2,required" db:"title" json:"title"`
}

func NewArea() *Area {
	return &Area{}
}

func (p *Area) GetID() string {
	return p.ID
}

func (p *Area) GetTitle() string {
	return p.Title
}
func (p *Area) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetTitle bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetTitle = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetTitle {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Title is not set"))
	}
	return nil
}

func (p *Area) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Area) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *Area) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Area"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Area) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Area) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err)
	}
	return err
}

func (p *Area) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Area(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
//  - Coords
//  - Center
type City struct {
	ID     string        `thrift:"id,1,required" db:"id" json:"id"`
	Name   string        `thrift:"name,2,required" db:"name" json:"name"`
	Coords []*Coordinate `thrift:"coords,3" db:"coords" json:"coords,omitempty"`
	Center *Coordinate   `thrift:"center,4" db:"center" json:"center,omitempty"`
}

func NewCity() *City {
	return &City{}
}

func (p *City) GetID() string {
	return p.ID
}

func (p *City) GetName() string {
	return p.Name
}

var City_Coords_DEFAULT []*Coordinate

func (p *City) GetCoords() []*Coordinate {
	return p.Coords
}

var City_Center_DEFAULT *Coordinate

func (p *City) GetCenter() *Coordinate {
	if !p.IsSetCenter() {
		return City_Center_DEFAULT
	}
	return p.Center
}
func (p *City) IsSetCoords() bool {
	return p.Coords != nil
}

func (p *City) IsSetCenter() bool {
	return p.Center != nil
}

func (p *City) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetName bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetName = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	return nil
}

func (p *City) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *City) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *City) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Coordinate, 0, size)
	p.Coords = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &Coordinate{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Coords = append(p.Coords, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *City) ReadField4(iprot thrift.TProtocol) error {
	p.Center = &Coordinate{}
	if err := p.Center.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Center), err)
	}
	return nil
}

func (p *City) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("City"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *City) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *City) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *City) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCoords() {
		if err := oprot.WriteFieldBegin("coords", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:coords: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Coords)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Coords {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:coords: ", p), err)
		}
	}
	return err
}

func (p *City) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCenter() {
		if err := oprot.WriteFieldBegin("center", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:center: ", p), err)
		}
		if err := p.Center.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Center), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:center: ", p), err)
		}
	}
	return err
}

func (p *City) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("City(%+v)", *p)
}

// Attributes:
//  - ID
//  - Content
//  - Creator
type Image struct {
	ID      *string `thrift:"id,1" db:"id" json:"id,omitempty"`
	Content *string `thrift:"content,2" db:"content" json:"content,omitempty"`
	Creator *string `thrift:"creator,3" db:"creator" json:"creator,omitempty"`
}

func NewImage() *Image {
	return &Image{}
}

var Image_ID_DEFAULT string

func (p *Image) GetID() string {
	if !p.IsSetID() {
		return Image_ID_DEFAULT
	}
	return *p.ID
}

var Image_Content_DEFAULT string

func (p *Image) GetContent() string {
	if !p.IsSetContent() {
		return Image_Content_DEFAULT
	}
	return *p.Content
}

var Image_Creator_DEFAULT string

func (p *Image) GetCreator() string {
	if !p.IsSetCreator() {
		return Image_Creator_DEFAULT
	}
	return *p.Creator
}
func (p *Image) IsSetID() bool {
	return p.ID != nil
}

func (p *Image) IsSetContent() bool {
	return p.Content != nil
}

func (p *Image) IsSetCreator() bool {
	return p.Creator != nil
}

func (p *Image) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Image) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = &v
	}
	return nil
}

func (p *Image) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Content = &v
	}
	return nil
}

func (p *Image) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Creator = &v
	}
	return nil
}

func (p *Image) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Image"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Image) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
		}
	}
	return err
}

func (p *Image) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err := oprot.WriteFieldBegin("content", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:content: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Content)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.content (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:content: ", p), err)
		}
	}
	return err
}

func (p *Image) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreator() {
		if err := oprot.WriteFieldBegin("creator", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:creator: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Creator)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.creator (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:creator: ", p), err)
		}
	}
	return err
}

func (p *Image) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Image(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
//  - Icon
//  - Iconid
type Sport struct {
	ID     *string `thrift:"id,1" db:"id" json:"id,omitempty"`
	Name   *string `thrift:"name,2" db:"name" json:"name,omitempty"`
	Icon   *Image  `thrift:"icon,3" db:"icon" json:"icon,omitempty"`
	Iconid *string `thrift:"iconid,4" db:"iconid" json:"iconid,omitempty"`
}

func NewSport() *Sport {
	return &Sport{}
}

var Sport_ID_DEFAULT string

func (p *Sport) GetID() string {
	if !p.IsSetID() {
		return Sport_ID_DEFAULT
	}
	return *p.ID
}

var Sport_Name_DEFAULT string

func (p *Sport) GetName() string {
	if !p.IsSetName() {
		return Sport_Name_DEFAULT
	}
	return *p.Name
}

var Sport_Icon_DEFAULT *Image

func (p *Sport) GetIcon() *Image {
	if !p.IsSetIcon() {
		return Sport_Icon_DEFAULT
	}
	return p.Icon
}

var Sport_Iconid_DEFAULT string

func (p *Sport) GetIconid() string {
	if !p.IsSetIconid() {
		return Sport_Iconid_DEFAULT
	}
	return *p.Iconid
}
func (p *Sport) IsSetID() bool {
	return p.ID != nil
}

func (p *Sport) IsSetName() bool {
	return p.Name != nil
}

func (p *Sport) IsSetIcon() bool {
	return p.Icon != nil
}

func (p *Sport) IsSetIconid() bool {
	return p.Iconid != nil
}

func (p *Sport) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Sport) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = &v
	}
	return nil
}

func (p *Sport) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *Sport) ReadField3(iprot thrift.TProtocol) error {
	p.Icon = &Image{}
	if err := p.Icon.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Icon), err)
	}
	return nil
}

func (p *Sport) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Iconid = &v
	}
	return nil
}

func (p *Sport) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Sport"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Sport) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
		}
	}
	return err
}

func (p *Sport) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
		}
	}
	return err
}

func (p *Sport) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIcon() {
		if err := oprot.WriteFieldBegin("icon", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:icon: ", p), err)
		}
		if err := p.Icon.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Icon), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:icon: ", p), err)
		}
	}
	return err
}

func (p *Sport) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIconid() {
		if err := oprot.WriteFieldBegin("iconid", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:iconid: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Iconid)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.iconid (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:iconid: ", p), err)
		}
	}
	return err
}

func (p *Sport) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Sport(%+v)", *p)
}
