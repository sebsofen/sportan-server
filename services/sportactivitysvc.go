// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package services

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type SportActivitySvc interface {
	// Parameters:
	//  - Token
	//  - Sportactivity
	CreateActivity(token string, sportactivity *SportActivity) (r *SportActivity, err error)
	// Parameters:
	//  - Token
	GetAvailableActivityList(token string) (r []string, err error)
	// Parameters:
	//  - Token
	//  - Acitivityid
	GetActivity(token string, acitivityid string) (r *SportActivity, err error)
	// Parameters:
	//  - Token
	//  - Activityid
	JoinActivity(token string, activityid string) (err error)
	// Parameters:
	//  - Token
	//  - Activityid
	DeclineActivity(token string, activityid string) (err error)
}

type SportActivitySvcClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewSportActivitySvcClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SportActivitySvcClient {
	return &SportActivitySvcClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewSportActivitySvcClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SportActivitySvcClient {
	return &SportActivitySvcClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Token
//  - Sportactivity
func (p *SportActivitySvcClient) CreateActivity(token string, sportactivity *SportActivity) (r *SportActivity, err error) {
	if err = p.sendCreateActivity(token, sportactivity); err != nil {
		return
	}
	return p.recvCreateActivity()
}

func (p *SportActivitySvcClient) sendCreateActivity(token string, sportactivity *SportActivity) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createActivity", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SportActivitySvcCreateActivityArgs{
		Token:         token,
		Sportactivity: sportactivity,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SportActivitySvcClient) recvCreateActivity() (value *SportActivity, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createActivity" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createActivity failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createActivity failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createActivity failed: invalid message type")
		return
	}
	result := SportActivitySvcCreateActivityResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Token
func (p *SportActivitySvcClient) GetAvailableActivityList(token string) (r []string, err error) {
	if err = p.sendGetAvailableActivityList(token); err != nil {
		return
	}
	return p.recvGetAvailableActivityList()
}

func (p *SportActivitySvcClient) sendGetAvailableActivityList(token string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getAvailableActivityList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SportActivitySvcGetAvailableActivityListArgs{
		Token: token,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SportActivitySvcClient) recvGetAvailableActivityList() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getAvailableActivityList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAvailableActivityList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAvailableActivityList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAvailableActivityList failed: invalid message type")
		return
	}
	result := SportActivitySvcGetAvailableActivityListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Token
//  - Acitivityid
func (p *SportActivitySvcClient) GetActivity(token string, acitivityid string) (r *SportActivity, err error) {
	if err = p.sendGetActivity(token, acitivityid); err != nil {
		return
	}
	return p.recvGetActivity()
}

func (p *SportActivitySvcClient) sendGetActivity(token string, acitivityid string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getActivity", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SportActivitySvcGetActivityArgs{
		Token:       token,
		Acitivityid: acitivityid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SportActivitySvcClient) recvGetActivity() (value *SportActivity, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getActivity" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getActivity failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getActivity failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error17 error
		error17, err = error16.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error17
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getActivity failed: invalid message type")
		return
	}
	result := SportActivitySvcGetActivityResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Token
//  - Activityid
func (p *SportActivitySvcClient) JoinActivity(token string, activityid string) (err error) {
	if err = p.sendJoinActivity(token, activityid); err != nil {
		return
	}
	return p.recvJoinActivity()
}

func (p *SportActivitySvcClient) sendJoinActivity(token string, activityid string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("joinActivity", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SportActivitySvcJoinActivityArgs{
		Token:      token,
		Activityid: activityid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SportActivitySvcClient) recvJoinActivity() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "joinActivity" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "joinActivity failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "joinActivity failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "joinActivity failed: invalid message type")
		return
	}
	result := SportActivitySvcJoinActivityResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - Token
//  - Activityid
func (p *SportActivitySvcClient) DeclineActivity(token string, activityid string) (err error) {
	if err = p.sendDeclineActivity(token, activityid); err != nil {
		return
	}
	return p.recvDeclineActivity()
}

func (p *SportActivitySvcClient) sendDeclineActivity(token string, activityid string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("declineActivity", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SportActivitySvcDeclineActivityArgs{
		Token:      token,
		Activityid: activityid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SportActivitySvcClient) recvDeclineActivity() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "declineActivity" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "declineActivity failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "declineActivity failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error21 error
		error21, err = error20.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error21
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "declineActivity failed: invalid message type")
		return
	}
	result := SportActivitySvcDeclineActivityResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

type SportActivitySvcProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      SportActivitySvc
}

func (p *SportActivitySvcProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *SportActivitySvcProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *SportActivitySvcProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewSportActivitySvcProcessor(handler SportActivitySvc) *SportActivitySvcProcessor {

	self22 := &SportActivitySvcProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self22.processorMap["createActivity"] = &sportActivitySvcProcessorCreateActivity{handler: handler}
	self22.processorMap["getAvailableActivityList"] = &sportActivitySvcProcessorGetAvailableActivityList{handler: handler}
	self22.processorMap["getActivity"] = &sportActivitySvcProcessorGetActivity{handler: handler}
	self22.processorMap["joinActivity"] = &sportActivitySvcProcessorJoinActivity{handler: handler}
	self22.processorMap["declineActivity"] = &sportActivitySvcProcessorDeclineActivity{handler: handler}
	return self22
}

func (p *SportActivitySvcProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x23 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x23.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x23

}

type sportActivitySvcProcessorCreateActivity struct {
	handler SportActivitySvc
}

func (p *sportActivitySvcProcessorCreateActivity) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SportActivitySvcCreateActivityArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createActivity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SportActivitySvcCreateActivityResult{}
	var retval *SportActivity
	var err2 error
	if retval, err2 = p.handler.CreateActivity(args.Token, args.Sportactivity); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createActivity: "+err2.Error())
		oprot.WriteMessageBegin("createActivity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createActivity", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sportActivitySvcProcessorGetAvailableActivityList struct {
	handler SportActivitySvc
}

func (p *sportActivitySvcProcessorGetAvailableActivityList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SportActivitySvcGetAvailableActivityListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAvailableActivityList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SportActivitySvcGetAvailableActivityListResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetAvailableActivityList(args.Token); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAvailableActivityList: "+err2.Error())
		oprot.WriteMessageBegin("getAvailableActivityList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAvailableActivityList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sportActivitySvcProcessorGetActivity struct {
	handler SportActivitySvc
}

func (p *sportActivitySvcProcessorGetActivity) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SportActivitySvcGetActivityArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getActivity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SportActivitySvcGetActivityResult{}
	var retval *SportActivity
	var err2 error
	if retval, err2 = p.handler.GetActivity(args.Token, args.Acitivityid); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getActivity: "+err2.Error())
		oprot.WriteMessageBegin("getActivity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getActivity", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sportActivitySvcProcessorJoinActivity struct {
	handler SportActivitySvc
}

func (p *sportActivitySvcProcessorJoinActivity) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SportActivitySvcJoinActivityArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("joinActivity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SportActivitySvcJoinActivityResult{}
	var err2 error
	if err2 = p.handler.JoinActivity(args.Token, args.Activityid); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing joinActivity: "+err2.Error())
		oprot.WriteMessageBegin("joinActivity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("joinActivity", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sportActivitySvcProcessorDeclineActivity struct {
	handler SportActivitySvc
}

func (p *sportActivitySvcProcessorDeclineActivity) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SportActivitySvcDeclineActivityArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("declineActivity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SportActivitySvcDeclineActivityResult{}
	var err2 error
	if err2 = p.handler.DeclineActivity(args.Token, args.Activityid); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing declineActivity: "+err2.Error())
		oprot.WriteMessageBegin("declineActivity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("declineActivity", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Token
//  - Sportactivity
type SportActivitySvcCreateActivityArgs struct {
	Token         string         `thrift:"token,1" db:"token" json:"token"`
	Sportactivity *SportActivity `thrift:"sportactivity,2" db:"sportactivity" json:"sportactivity"`
}

func NewSportActivitySvcCreateActivityArgs() *SportActivitySvcCreateActivityArgs {
	return &SportActivitySvcCreateActivityArgs{}
}

func (p *SportActivitySvcCreateActivityArgs) GetToken() string {
	return p.Token
}

var SportActivitySvcCreateActivityArgs_Sportactivity_DEFAULT *SportActivity

func (p *SportActivitySvcCreateActivityArgs) GetSportactivity() *SportActivity {
	if !p.IsSetSportactivity() {
		return SportActivitySvcCreateActivityArgs_Sportactivity_DEFAULT
	}
	return p.Sportactivity
}
func (p *SportActivitySvcCreateActivityArgs) IsSetSportactivity() bool {
	return p.Sportactivity != nil
}

func (p *SportActivitySvcCreateActivityArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SportActivitySvcCreateActivityArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *SportActivitySvcCreateActivityArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Sportactivity = &SportActivity{}
	if err := p.Sportactivity.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sportactivity), err)
	}
	return nil
}

func (p *SportActivitySvcCreateActivityArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createActivity_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SportActivitySvcCreateActivityArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err)
	}
	return err
}

func (p *SportActivitySvcCreateActivityArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sportactivity", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sportactivity: ", p), err)
	}
	if err := p.Sportactivity.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sportactivity), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sportactivity: ", p), err)
	}
	return err
}

func (p *SportActivitySvcCreateActivityArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SportActivitySvcCreateActivityArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SportActivitySvcCreateActivityResult struct {
	Success *SportActivity `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSportActivitySvcCreateActivityResult() *SportActivitySvcCreateActivityResult {
	return &SportActivitySvcCreateActivityResult{}
}

var SportActivitySvcCreateActivityResult_Success_DEFAULT *SportActivity

func (p *SportActivitySvcCreateActivityResult) GetSuccess() *SportActivity {
	if !p.IsSetSuccess() {
		return SportActivitySvcCreateActivityResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SportActivitySvcCreateActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SportActivitySvcCreateActivityResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SportActivitySvcCreateActivityResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &SportActivity{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SportActivitySvcCreateActivityResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createActivity_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SportActivitySvcCreateActivityResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SportActivitySvcCreateActivityResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SportActivitySvcCreateActivityResult(%+v)", *p)
}

// Attributes:
//  - Token
type SportActivitySvcGetAvailableActivityListArgs struct {
	Token string `thrift:"token,1" db:"token" json:"token"`
}

func NewSportActivitySvcGetAvailableActivityListArgs() *SportActivitySvcGetAvailableActivityListArgs {
	return &SportActivitySvcGetAvailableActivityListArgs{}
}

func (p *SportActivitySvcGetAvailableActivityListArgs) GetToken() string {
	return p.Token
}
func (p *SportActivitySvcGetAvailableActivityListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SportActivitySvcGetAvailableActivityListArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *SportActivitySvcGetAvailableActivityListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAvailableActivityList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SportActivitySvcGetAvailableActivityListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err)
	}
	return err
}

func (p *SportActivitySvcGetAvailableActivityListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SportActivitySvcGetAvailableActivityListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SportActivitySvcGetAvailableActivityListResult struct {
	Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSportActivitySvcGetAvailableActivityListResult() *SportActivitySvcGetAvailableActivityListResult {
	return &SportActivitySvcGetAvailableActivityListResult{}
}

var SportActivitySvcGetAvailableActivityListResult_Success_DEFAULT []string

func (p *SportActivitySvcGetAvailableActivityListResult) GetSuccess() []string {
	return p.Success
}
func (p *SportActivitySvcGetAvailableActivityListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SportActivitySvcGetAvailableActivityListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SportActivitySvcGetAvailableActivityListResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem24 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem24 = v
		}
		p.Success = append(p.Success, _elem24)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SportActivitySvcGetAvailableActivityListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAvailableActivityList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SportActivitySvcGetAvailableActivityListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SportActivitySvcGetAvailableActivityListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SportActivitySvcGetAvailableActivityListResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Acitivityid
type SportActivitySvcGetActivityArgs struct {
	Token       string `thrift:"token,1" db:"token" json:"token"`
	Acitivityid string `thrift:"acitivityid,2" db:"acitivityid" json:"acitivityid"`
}

func NewSportActivitySvcGetActivityArgs() *SportActivitySvcGetActivityArgs {
	return &SportActivitySvcGetActivityArgs{}
}

func (p *SportActivitySvcGetActivityArgs) GetToken() string {
	return p.Token
}

func (p *SportActivitySvcGetActivityArgs) GetAcitivityid() string {
	return p.Acitivityid
}
func (p *SportActivitySvcGetActivityArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SportActivitySvcGetActivityArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *SportActivitySvcGetActivityArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Acitivityid = v
	}
	return nil
}

func (p *SportActivitySvcGetActivityArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getActivity_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SportActivitySvcGetActivityArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err)
	}
	return err
}

func (p *SportActivitySvcGetActivityArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("acitivityid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:acitivityid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Acitivityid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.acitivityid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:acitivityid: ", p), err)
	}
	return err
}

func (p *SportActivitySvcGetActivityArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SportActivitySvcGetActivityArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SportActivitySvcGetActivityResult struct {
	Success *SportActivity `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSportActivitySvcGetActivityResult() *SportActivitySvcGetActivityResult {
	return &SportActivitySvcGetActivityResult{}
}

var SportActivitySvcGetActivityResult_Success_DEFAULT *SportActivity

func (p *SportActivitySvcGetActivityResult) GetSuccess() *SportActivity {
	if !p.IsSetSuccess() {
		return SportActivitySvcGetActivityResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SportActivitySvcGetActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SportActivitySvcGetActivityResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SportActivitySvcGetActivityResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &SportActivity{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SportActivitySvcGetActivityResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getActivity_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SportActivitySvcGetActivityResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SportActivitySvcGetActivityResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SportActivitySvcGetActivityResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Activityid
type SportActivitySvcJoinActivityArgs struct {
	Token      string `thrift:"token,1" db:"token" json:"token"`
	Activityid string `thrift:"activityid,2" db:"activityid" json:"activityid"`
}

func NewSportActivitySvcJoinActivityArgs() *SportActivitySvcJoinActivityArgs {
	return &SportActivitySvcJoinActivityArgs{}
}

func (p *SportActivitySvcJoinActivityArgs) GetToken() string {
	return p.Token
}

func (p *SportActivitySvcJoinActivityArgs) GetActivityid() string {
	return p.Activityid
}
func (p *SportActivitySvcJoinActivityArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SportActivitySvcJoinActivityArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *SportActivitySvcJoinActivityArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Activityid = v
	}
	return nil
}

func (p *SportActivitySvcJoinActivityArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("joinActivity_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SportActivitySvcJoinActivityArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err)
	}
	return err
}

func (p *SportActivitySvcJoinActivityArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("activityid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:activityid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Activityid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.activityid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:activityid: ", p), err)
	}
	return err
}

func (p *SportActivitySvcJoinActivityArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SportActivitySvcJoinActivityArgs(%+v)", *p)
}

type SportActivitySvcJoinActivityResult struct {
}

func NewSportActivitySvcJoinActivityResult() *SportActivitySvcJoinActivityResult {
	return &SportActivitySvcJoinActivityResult{}
}

func (p *SportActivitySvcJoinActivityResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SportActivitySvcJoinActivityResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("joinActivity_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SportActivitySvcJoinActivityResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SportActivitySvcJoinActivityResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Activityid
type SportActivitySvcDeclineActivityArgs struct {
	Token      string `thrift:"token,1" db:"token" json:"token"`
	Activityid string `thrift:"activityid,2" db:"activityid" json:"activityid"`
}

func NewSportActivitySvcDeclineActivityArgs() *SportActivitySvcDeclineActivityArgs {
	return &SportActivitySvcDeclineActivityArgs{}
}

func (p *SportActivitySvcDeclineActivityArgs) GetToken() string {
	return p.Token
}

func (p *SportActivitySvcDeclineActivityArgs) GetActivityid() string {
	return p.Activityid
}
func (p *SportActivitySvcDeclineActivityArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SportActivitySvcDeclineActivityArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *SportActivitySvcDeclineActivityArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Activityid = v
	}
	return nil
}

func (p *SportActivitySvcDeclineActivityArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("declineActivity_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SportActivitySvcDeclineActivityArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err)
	}
	return err
}

func (p *SportActivitySvcDeclineActivityArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("activityid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:activityid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Activityid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.activityid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:activityid: ", p), err)
	}
	return err
}

func (p *SportActivitySvcDeclineActivityArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SportActivitySvcDeclineActivityArgs(%+v)", *p)
}

type SportActivitySvcDeclineActivityResult struct {
}

func NewSportActivitySvcDeclineActivityResult() *SportActivitySvcDeclineActivityResult {
	return &SportActivitySvcDeclineActivityResult{}
}

func (p *SportActivitySvcDeclineActivityResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SportActivitySvcDeclineActivityResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("declineActivity_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SportActivitySvcDeclineActivityResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SportActivitySvcDeclineActivityResult(%+v)", *p)
}
