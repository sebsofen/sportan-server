// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package services

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type AreaSvc interface {
	// Parameters:
	//  - Token
	//  - Area
	CreateArea(token string, area *Area) (err error)
	// Parameters:
	//  - Token
	//  - Area
	UpdateArea(token string, area *Area) (err error)
	// Parameters:
	//  - Token
	//  - Area
	DeleteArea(token string, area *Area) (err error)
	// Parameters:
	//  - Token
	//  - Areaid
	GetAreaById(token string, areaid string) (r *Area, err error)
	// Parameters:
	//  - Token
	//  - Areaid
	//  - Date
	WasHere(token string, areaid string, date int64) (err error)
	// Parameters:
	//  - Token
	//  - Coordinate
	//  - Limit
	GetNearBy(token string, coordinate *Coordinate, limit int32) (r []string, err error)
	// Parameters:
	//  - Cityid
	GetAllAreasInCity(cityid string) (r []string, err error)
}

type AreaSvcClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewAreaSvcClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AreaSvcClient {
	return &AreaSvcClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewAreaSvcClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AreaSvcClient {
	return &AreaSvcClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Token
//  - Area
func (p *AreaSvcClient) CreateArea(token string, area *Area) (err error) {
	if err = p.sendCreateArea(token, area); err != nil {
		return
	}
	return p.recvCreateArea()
}

func (p *AreaSvcClient) sendCreateArea(token string, area *Area) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createArea", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AreaSvcCreateAreaArgs{
		Token: token,
		Area:  area,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AreaSvcClient) recvCreateArea() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createArea" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createArea failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createArea failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error94 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error95 error
		error95, err = error94.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error95
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createArea failed: invalid message type")
		return
	}
	result := AreaSvcCreateAreaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - Token
//  - Area
func (p *AreaSvcClient) UpdateArea(token string, area *Area) (err error) {
	if err = p.sendUpdateArea(token, area); err != nil {
		return
	}
	return p.recvUpdateArea()
}

func (p *AreaSvcClient) sendUpdateArea(token string, area *Area) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateArea", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AreaSvcUpdateAreaArgs{
		Token: token,
		Area:  area,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AreaSvcClient) recvUpdateArea() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateArea" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateArea failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateArea failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error96 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error97 error
		error97, err = error96.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error97
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateArea failed: invalid message type")
		return
	}
	result := AreaSvcUpdateAreaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - Token
//  - Area
func (p *AreaSvcClient) DeleteArea(token string, area *Area) (err error) {
	if err = p.sendDeleteArea(token, area); err != nil {
		return
	}
	return p.recvDeleteArea()
}

func (p *AreaSvcClient) sendDeleteArea(token string, area *Area) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteArea", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AreaSvcDeleteAreaArgs{
		Token: token,
		Area:  area,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AreaSvcClient) recvDeleteArea() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "deleteArea" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteArea failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteArea failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error98 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error99 error
		error99, err = error98.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error99
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteArea failed: invalid message type")
		return
	}
	result := AreaSvcDeleteAreaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - Token
//  - Areaid
func (p *AreaSvcClient) GetAreaById(token string, areaid string) (r *Area, err error) {
	if err = p.sendGetAreaById(token, areaid); err != nil {
		return
	}
	return p.recvGetAreaById()
}

func (p *AreaSvcClient) sendGetAreaById(token string, areaid string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getAreaById", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AreaSvcGetAreaByIdArgs{
		Token:  token,
		Areaid: areaid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AreaSvcClient) recvGetAreaById() (value *Area, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getAreaById" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAreaById failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAreaById failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error100 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error101 error
		error101, err = error100.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error101
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAreaById failed: invalid message type")
		return
	}
	result := AreaSvcGetAreaByIdResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Token
//  - Areaid
//  - Date
func (p *AreaSvcClient) WasHere(token string, areaid string, date int64) (err error) {
	if err = p.sendWasHere(token, areaid, date); err != nil {
		return
	}
	return p.recvWasHere()
}

func (p *AreaSvcClient) sendWasHere(token string, areaid string, date int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("wasHere", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AreaSvcWasHereArgs{
		Token:  token,
		Areaid: areaid,
		Date:   date,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AreaSvcClient) recvWasHere() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "wasHere" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "wasHere failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "wasHere failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error102 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error103 error
		error103, err = error102.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error103
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "wasHere failed: invalid message type")
		return
	}
	result := AreaSvcWasHereResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - Token
//  - Coordinate
//  - Limit
func (p *AreaSvcClient) GetNearBy(token string, coordinate *Coordinate, limit int32) (r []string, err error) {
	if err = p.sendGetNearBy(token, coordinate, limit); err != nil {
		return
	}
	return p.recvGetNearBy()
}

func (p *AreaSvcClient) sendGetNearBy(token string, coordinate *Coordinate, limit int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getNearBy", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AreaSvcGetNearByArgs{
		Token:      token,
		Coordinate: coordinate,
		Limit:      limit,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AreaSvcClient) recvGetNearBy() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getNearBy" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getNearBy failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getNearBy failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error104 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error105 error
		error105, err = error104.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error105
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getNearBy failed: invalid message type")
		return
	}
	result := AreaSvcGetNearByResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Cityid
func (p *AreaSvcClient) GetAllAreasInCity(cityid string) (r []string, err error) {
	if err = p.sendGetAllAreasInCity(cityid); err != nil {
		return
	}
	return p.recvGetAllAreasInCity()
}

func (p *AreaSvcClient) sendGetAllAreasInCity(cityid string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getAllAreasInCity", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AreaSvcGetAllAreasInCityArgs{
		Cityid: cityid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AreaSvcClient) recvGetAllAreasInCity() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getAllAreasInCity" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllAreasInCity failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllAreasInCity failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error106 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error107 error
		error107, err = error106.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error107
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllAreasInCity failed: invalid message type")
		return
	}
	result := AreaSvcGetAllAreasInCityResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type AreaSvcProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      AreaSvc
}

func (p *AreaSvcProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *AreaSvcProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *AreaSvcProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewAreaSvcProcessor(handler AreaSvc) *AreaSvcProcessor {

	self108 := &AreaSvcProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self108.processorMap["createArea"] = &areaSvcProcessorCreateArea{handler: handler}
	self108.processorMap["updateArea"] = &areaSvcProcessorUpdateArea{handler: handler}
	self108.processorMap["deleteArea"] = &areaSvcProcessorDeleteArea{handler: handler}
	self108.processorMap["getAreaById"] = &areaSvcProcessorGetAreaById{handler: handler}
	self108.processorMap["wasHere"] = &areaSvcProcessorWasHere{handler: handler}
	self108.processorMap["getNearBy"] = &areaSvcProcessorGetNearBy{handler: handler}
	self108.processorMap["getAllAreasInCity"] = &areaSvcProcessorGetAllAreasInCity{handler: handler}
	return self108
}

func (p *AreaSvcProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x109 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x109.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x109

}

type areaSvcProcessorCreateArea struct {
	handler AreaSvc
}

func (p *areaSvcProcessorCreateArea) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AreaSvcCreateAreaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createArea", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AreaSvcCreateAreaResult{}
	var err2 error
	if err2 = p.handler.CreateArea(args.Token, args.Area); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createArea: "+err2.Error())
		oprot.WriteMessageBegin("createArea", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("createArea", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type areaSvcProcessorUpdateArea struct {
	handler AreaSvc
}

func (p *areaSvcProcessorUpdateArea) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AreaSvcUpdateAreaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateArea", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AreaSvcUpdateAreaResult{}
	var err2 error
	if err2 = p.handler.UpdateArea(args.Token, args.Area); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateArea: "+err2.Error())
		oprot.WriteMessageBegin("updateArea", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("updateArea", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type areaSvcProcessorDeleteArea struct {
	handler AreaSvc
}

func (p *areaSvcProcessorDeleteArea) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AreaSvcDeleteAreaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteArea", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AreaSvcDeleteAreaResult{}
	var err2 error
	if err2 = p.handler.DeleteArea(args.Token, args.Area); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteArea: "+err2.Error())
		oprot.WriteMessageBegin("deleteArea", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("deleteArea", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type areaSvcProcessorGetAreaById struct {
	handler AreaSvc
}

func (p *areaSvcProcessorGetAreaById) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AreaSvcGetAreaByIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAreaById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AreaSvcGetAreaByIdResult{}
	var retval *Area
	var err2 error
	if retval, err2 = p.handler.GetAreaById(args.Token, args.Areaid); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAreaById: "+err2.Error())
		oprot.WriteMessageBegin("getAreaById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAreaById", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type areaSvcProcessorWasHere struct {
	handler AreaSvc
}

func (p *areaSvcProcessorWasHere) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AreaSvcWasHereArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("wasHere", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AreaSvcWasHereResult{}
	var err2 error
	if err2 = p.handler.WasHere(args.Token, args.Areaid, args.Date); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing wasHere: "+err2.Error())
		oprot.WriteMessageBegin("wasHere", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("wasHere", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type areaSvcProcessorGetNearBy struct {
	handler AreaSvc
}

func (p *areaSvcProcessorGetNearBy) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AreaSvcGetNearByArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getNearBy", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AreaSvcGetNearByResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetNearBy(args.Token, args.Coordinate, args.Limit); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNearBy: "+err2.Error())
		oprot.WriteMessageBegin("getNearBy", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getNearBy", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type areaSvcProcessorGetAllAreasInCity struct {
	handler AreaSvc
}

func (p *areaSvcProcessorGetAllAreasInCity) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AreaSvcGetAllAreasInCityArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAllAreasInCity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AreaSvcGetAllAreasInCityResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetAllAreasInCity(args.Cityid); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllAreasInCity: "+err2.Error())
		oprot.WriteMessageBegin("getAllAreasInCity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAllAreasInCity", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Token
//  - Area
type AreaSvcCreateAreaArgs struct {
	Token string `thrift:"token,1" db:"token" json:"token"`
	Area  *Area  `thrift:"area,2" db:"area" json:"area"`
}

func NewAreaSvcCreateAreaArgs() *AreaSvcCreateAreaArgs {
	return &AreaSvcCreateAreaArgs{}
}

func (p *AreaSvcCreateAreaArgs) GetToken() string {
	return p.Token
}

var AreaSvcCreateAreaArgs_Area_DEFAULT *Area

func (p *AreaSvcCreateAreaArgs) GetArea() *Area {
	if !p.IsSetArea() {
		return AreaSvcCreateAreaArgs_Area_DEFAULT
	}
	return p.Area
}
func (p *AreaSvcCreateAreaArgs) IsSetArea() bool {
	return p.Area != nil
}

func (p *AreaSvcCreateAreaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AreaSvcCreateAreaArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *AreaSvcCreateAreaArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Area = &Area{}
	if err := p.Area.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Area), err)
	}
	return nil
}

func (p *AreaSvcCreateAreaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createArea_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AreaSvcCreateAreaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err)
	}
	return err
}

func (p *AreaSvcCreateAreaArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("area", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:area: ", p), err)
	}
	if err := p.Area.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Area), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:area: ", p), err)
	}
	return err
}

func (p *AreaSvcCreateAreaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AreaSvcCreateAreaArgs(%+v)", *p)
}

type AreaSvcCreateAreaResult struct {
}

func NewAreaSvcCreateAreaResult() *AreaSvcCreateAreaResult {
	return &AreaSvcCreateAreaResult{}
}

func (p *AreaSvcCreateAreaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AreaSvcCreateAreaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createArea_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AreaSvcCreateAreaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AreaSvcCreateAreaResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Area
type AreaSvcUpdateAreaArgs struct {
	Token string `thrift:"token,1" db:"token" json:"token"`
	Area  *Area  `thrift:"area,2" db:"area" json:"area"`
}

func NewAreaSvcUpdateAreaArgs() *AreaSvcUpdateAreaArgs {
	return &AreaSvcUpdateAreaArgs{}
}

func (p *AreaSvcUpdateAreaArgs) GetToken() string {
	return p.Token
}

var AreaSvcUpdateAreaArgs_Area_DEFAULT *Area

func (p *AreaSvcUpdateAreaArgs) GetArea() *Area {
	if !p.IsSetArea() {
		return AreaSvcUpdateAreaArgs_Area_DEFAULT
	}
	return p.Area
}
func (p *AreaSvcUpdateAreaArgs) IsSetArea() bool {
	return p.Area != nil
}

func (p *AreaSvcUpdateAreaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AreaSvcUpdateAreaArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *AreaSvcUpdateAreaArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Area = &Area{}
	if err := p.Area.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Area), err)
	}
	return nil
}

func (p *AreaSvcUpdateAreaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateArea_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AreaSvcUpdateAreaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err)
	}
	return err
}

func (p *AreaSvcUpdateAreaArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("area", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:area: ", p), err)
	}
	if err := p.Area.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Area), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:area: ", p), err)
	}
	return err
}

func (p *AreaSvcUpdateAreaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AreaSvcUpdateAreaArgs(%+v)", *p)
}

type AreaSvcUpdateAreaResult struct {
}

func NewAreaSvcUpdateAreaResult() *AreaSvcUpdateAreaResult {
	return &AreaSvcUpdateAreaResult{}
}

func (p *AreaSvcUpdateAreaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AreaSvcUpdateAreaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateArea_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AreaSvcUpdateAreaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AreaSvcUpdateAreaResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Area
type AreaSvcDeleteAreaArgs struct {
	Token string `thrift:"token,1" db:"token" json:"token"`
	Area  *Area  `thrift:"area,2" db:"area" json:"area"`
}

func NewAreaSvcDeleteAreaArgs() *AreaSvcDeleteAreaArgs {
	return &AreaSvcDeleteAreaArgs{}
}

func (p *AreaSvcDeleteAreaArgs) GetToken() string {
	return p.Token
}

var AreaSvcDeleteAreaArgs_Area_DEFAULT *Area

func (p *AreaSvcDeleteAreaArgs) GetArea() *Area {
	if !p.IsSetArea() {
		return AreaSvcDeleteAreaArgs_Area_DEFAULT
	}
	return p.Area
}
func (p *AreaSvcDeleteAreaArgs) IsSetArea() bool {
	return p.Area != nil
}

func (p *AreaSvcDeleteAreaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AreaSvcDeleteAreaArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *AreaSvcDeleteAreaArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Area = &Area{}
	if err := p.Area.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Area), err)
	}
	return nil
}

func (p *AreaSvcDeleteAreaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteArea_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AreaSvcDeleteAreaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err)
	}
	return err
}

func (p *AreaSvcDeleteAreaArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("area", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:area: ", p), err)
	}
	if err := p.Area.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Area), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:area: ", p), err)
	}
	return err
}

func (p *AreaSvcDeleteAreaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AreaSvcDeleteAreaArgs(%+v)", *p)
}

type AreaSvcDeleteAreaResult struct {
}

func NewAreaSvcDeleteAreaResult() *AreaSvcDeleteAreaResult {
	return &AreaSvcDeleteAreaResult{}
}

func (p *AreaSvcDeleteAreaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AreaSvcDeleteAreaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteArea_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AreaSvcDeleteAreaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AreaSvcDeleteAreaResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Areaid
type AreaSvcGetAreaByIdArgs struct {
	Token  string `thrift:"token,1" db:"token" json:"token"`
	Areaid string `thrift:"areaid,2" db:"areaid" json:"areaid"`
}

func NewAreaSvcGetAreaByIdArgs() *AreaSvcGetAreaByIdArgs {
	return &AreaSvcGetAreaByIdArgs{}
}

func (p *AreaSvcGetAreaByIdArgs) GetToken() string {
	return p.Token
}

func (p *AreaSvcGetAreaByIdArgs) GetAreaid() string {
	return p.Areaid
}
func (p *AreaSvcGetAreaByIdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AreaSvcGetAreaByIdArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *AreaSvcGetAreaByIdArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Areaid = v
	}
	return nil
}

func (p *AreaSvcGetAreaByIdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAreaById_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AreaSvcGetAreaByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err)
	}
	return err
}

func (p *AreaSvcGetAreaByIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("areaid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:areaid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Areaid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.areaid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:areaid: ", p), err)
	}
	return err
}

func (p *AreaSvcGetAreaByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AreaSvcGetAreaByIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AreaSvcGetAreaByIdResult struct {
	Success *Area `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAreaSvcGetAreaByIdResult() *AreaSvcGetAreaByIdResult {
	return &AreaSvcGetAreaByIdResult{}
}

var AreaSvcGetAreaByIdResult_Success_DEFAULT *Area

func (p *AreaSvcGetAreaByIdResult) GetSuccess() *Area {
	if !p.IsSetSuccess() {
		return AreaSvcGetAreaByIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AreaSvcGetAreaByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AreaSvcGetAreaByIdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AreaSvcGetAreaByIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Area{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AreaSvcGetAreaByIdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAreaById_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AreaSvcGetAreaByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AreaSvcGetAreaByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AreaSvcGetAreaByIdResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Areaid
//  - Date
type AreaSvcWasHereArgs struct {
	Token  string `thrift:"token,1" db:"token" json:"token"`
	Areaid string `thrift:"areaid,2" db:"areaid" json:"areaid"`
	Date   int64  `thrift:"date,3" db:"date" json:"date"`
}

func NewAreaSvcWasHereArgs() *AreaSvcWasHereArgs {
	return &AreaSvcWasHereArgs{}
}

func (p *AreaSvcWasHereArgs) GetToken() string {
	return p.Token
}

func (p *AreaSvcWasHereArgs) GetAreaid() string {
	return p.Areaid
}

func (p *AreaSvcWasHereArgs) GetDate() int64 {
	return p.Date
}
func (p *AreaSvcWasHereArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AreaSvcWasHereArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *AreaSvcWasHereArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Areaid = v
	}
	return nil
}

func (p *AreaSvcWasHereArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Date = v
	}
	return nil
}

func (p *AreaSvcWasHereArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("wasHere_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AreaSvcWasHereArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err)
	}
	return err
}

func (p *AreaSvcWasHereArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("areaid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:areaid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Areaid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.areaid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:areaid: ", p), err)
	}
	return err
}

func (p *AreaSvcWasHereArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("date", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:date: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Date)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.date (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:date: ", p), err)
	}
	return err
}

func (p *AreaSvcWasHereArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AreaSvcWasHereArgs(%+v)", *p)
}

type AreaSvcWasHereResult struct {
}

func NewAreaSvcWasHereResult() *AreaSvcWasHereResult {
	return &AreaSvcWasHereResult{}
}

func (p *AreaSvcWasHereResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AreaSvcWasHereResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("wasHere_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AreaSvcWasHereResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AreaSvcWasHereResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Coordinate
//  - Limit
type AreaSvcGetNearByArgs struct {
	Token      string      `thrift:"token,1" db:"token" json:"token"`
	Coordinate *Coordinate `thrift:"coordinate,2" db:"coordinate" json:"coordinate"`
	Limit      int32       `thrift:"limit,3" db:"limit" json:"limit"`
}

func NewAreaSvcGetNearByArgs() *AreaSvcGetNearByArgs {
	return &AreaSvcGetNearByArgs{}
}

func (p *AreaSvcGetNearByArgs) GetToken() string {
	return p.Token
}

var AreaSvcGetNearByArgs_Coordinate_DEFAULT *Coordinate

func (p *AreaSvcGetNearByArgs) GetCoordinate() *Coordinate {
	if !p.IsSetCoordinate() {
		return AreaSvcGetNearByArgs_Coordinate_DEFAULT
	}
	return p.Coordinate
}

func (p *AreaSvcGetNearByArgs) GetLimit() int32 {
	return p.Limit
}
func (p *AreaSvcGetNearByArgs) IsSetCoordinate() bool {
	return p.Coordinate != nil
}

func (p *AreaSvcGetNearByArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AreaSvcGetNearByArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *AreaSvcGetNearByArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Coordinate = &Coordinate{}
	if err := p.Coordinate.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Coordinate), err)
	}
	return nil
}

func (p *AreaSvcGetNearByArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *AreaSvcGetNearByArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNearBy_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AreaSvcGetNearByArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err)
	}
	return err
}

func (p *AreaSvcGetNearByArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("coordinate", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:coordinate: ", p), err)
	}
	if err := p.Coordinate.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Coordinate), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:coordinate: ", p), err)
	}
	return err
}

func (p *AreaSvcGetNearByArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limit", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limit: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Limit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limit (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limit: ", p), err)
	}
	return err
}

func (p *AreaSvcGetNearByArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AreaSvcGetNearByArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AreaSvcGetNearByResult struct {
	Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAreaSvcGetNearByResult() *AreaSvcGetNearByResult {
	return &AreaSvcGetNearByResult{}
}

var AreaSvcGetNearByResult_Success_DEFAULT []string

func (p *AreaSvcGetNearByResult) GetSuccess() []string {
	return p.Success
}
func (p *AreaSvcGetNearByResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AreaSvcGetNearByResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AreaSvcGetNearByResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem110 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem110 = v
		}
		p.Success = append(p.Success, _elem110)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AreaSvcGetNearByResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNearBy_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AreaSvcGetNearByResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AreaSvcGetNearByResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AreaSvcGetNearByResult(%+v)", *p)
}

// Attributes:
//  - Cityid
type AreaSvcGetAllAreasInCityArgs struct {
	Cityid string `thrift:"cityid,1" db:"cityid" json:"cityid"`
}

func NewAreaSvcGetAllAreasInCityArgs() *AreaSvcGetAllAreasInCityArgs {
	return &AreaSvcGetAllAreasInCityArgs{}
}

func (p *AreaSvcGetAllAreasInCityArgs) GetCityid() string {
	return p.Cityid
}
func (p *AreaSvcGetAllAreasInCityArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AreaSvcGetAllAreasInCityArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Cityid = v
	}
	return nil
}

func (p *AreaSvcGetAllAreasInCityArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAllAreasInCity_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AreaSvcGetAllAreasInCityArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cityid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cityid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Cityid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cityid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cityid: ", p), err)
	}
	return err
}

func (p *AreaSvcGetAllAreasInCityArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AreaSvcGetAllAreasInCityArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AreaSvcGetAllAreasInCityResult struct {
	Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAreaSvcGetAllAreasInCityResult() *AreaSvcGetAllAreasInCityResult {
	return &AreaSvcGetAllAreasInCityResult{}
}

var AreaSvcGetAllAreasInCityResult_Success_DEFAULT []string

func (p *AreaSvcGetAllAreasInCityResult) GetSuccess() []string {
	return p.Success
}
func (p *AreaSvcGetAllAreasInCityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AreaSvcGetAllAreasInCityResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AreaSvcGetAllAreasInCityResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem111 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem111 = v
		}
		p.Success = append(p.Success, _elem111)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AreaSvcGetAllAreasInCityResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAllAreasInCity_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AreaSvcGetAllAreasInCityResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AreaSvcGetAllAreasInCityResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AreaSvcGetAllAreasInCityResult(%+v)", *p)
}
